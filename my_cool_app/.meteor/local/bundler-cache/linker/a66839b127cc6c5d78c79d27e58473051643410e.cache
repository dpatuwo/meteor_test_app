[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package.templating.Template;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"client\":{\"template.main.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// client/template.main.js                                                                            //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\n                                                                                                      // 1\nTemplate.body.addContent((function() {                                                                // 2\n  var view = this;                                                                                    // 3\n  return HTML.DIV({                                                                                   // 4\n    \"class\": \"container\"                                                                              // 5\n  }, \"\\n  \", HTML.HEADER(\"\\n  \", HTML.Raw(\"<h1>Basic Chat Application</h1>\"), \"\\n  \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n  \", HTML.Raw(\"<!-- template loginButtons -->\"), \"\\n  \"), \"\\n\\n  \", HTML.UL(\"\\n  \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"recentMessages\"));                                             // 7\n  }, function() {                                                                                     // 8\n    return [ \"\\n  \", HTML.Comment(\" handle bar syntax \"), \"\\n  \", HTML.LI(\"\\n  \", HTML.DIV({          // 9\n      \"class\": \"username\"                                                                             // 10\n    }, Blaze.View(\"lookup:username\", function() {                                                     // 11\n      return Spacebars.mustache(view.lookup(\"username\"));                                             // 12\n    })), \"\\n  \", HTML.DIV({                                                                           // 13\n      \"class\": \"message\"                                                                              // 14\n    }, Blaze.View(\"lookup:message\", function() {                                                      // 15\n      return Spacebars.mustache(view.lookup(\"message\"));                                              // 16\n    })), \"\\n  \"), \"\\n  \" ];                                                                           // 17\n  }), \"\\n  \"), \"\\n  \", HTML.FOOTER(\"\\n  \", Blaze.If(function() {                                      // 18\n    return Spacebars.call(view.lookup(\"currentUser\"));                                                // 19\n  }, function() {                                                                                     // 20\n    return [ \"\\n  \", HTML.Comment(\" helper from accounts package; hides form if user is not logged in \"), \"\\n\\n  \", HTML.FORM({\n      \"class\": \"new message\"                                                                          // 22\n    }, \"\\n  \", HTML.INPUT({                                                                           // 23\n      type: \"text\",                                                                                   // 24\n      name: \"text\",                                                                                   // 25\n      placeholder: \"Add a message\"                                                                    // 26\n    }), \"\\n  \"), \"\\n\\n  \" ];                                                                          // 27\n  }), \"\\n  \"), \"\\n\\n  \");                                                                             // 28\n}));                                                                                                  // 29\nMeteor.startup(Template.body.renderToDocument);                                                       // 30\n                                                                                                      // 31\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// client/main.js                                                                                     //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nMessages = new Mongo.Collection(\"msgs\");                                                              // 1\n// This code runs on both client (mini Mongo, Meteor's client-side cache; mini Mongo will keep a subset of the data that's on the server) and server (Production Mongo db database)\n                                                                                                      //\nif (Meteor.isServer) {                                                                                // 4\n  // This code only runs on the server                                                                //\n  // \"Meteor.publish\" gets data from the server to the client                                         //\n  Meteor.publish(\"messages\", function () {                                                            // 7\n    return Messages.find({}, { sort: { createdAt: -1 }, limit: 5 });                                  // 8\n    // 5 most recent messages to be sent to client                                                    //\n  });                                                                                                 // 7\n}                                                                                                     //\n                                                                                                      //\nif (Meteor.isClient) {                                                                                // 14\n  // This code only runs on the client                                                                //\n  // Subscribe to Meteor.publish (publication) to recieve messages; similar to a REST end point       //\n  Meteor.subscribe(\"messages\");                                                                       // 17\n}                                                                                                     //\n                                                                                                      //\n// This code sends data (messages) from the client to the server                                      //\nMeteor.methods({                                                                                      // 21\n  sendMessage: function () {                                                                          // 22\n    function sendMessage(message) {                                                                   // 22\n      if (!Meteor.userId()) {                                                                         // 23\n        throw new Meteor.Error(\"not-authorized\");                                                     // 24\n      } // user authentication                                                                        //\n      //prevents users from sending messages when not logged in                                       //\n                                                                                                      //\n      Messages.insert({                                                                               // 22\n        text: message,                                                                                // 29\n        createdAt: new Date(),                                                                        // 30\n        username: Meteor.user().username // user authentication                                       // 31\n      });                                                                                             // 28\n    }                                                                                                 //\n                                                                                                      //\n    return sendMessage;                                                                               //\n  }()                                                                                                 //\n});                                                                                                   //\n                                                                                                      //\nif (Meteor.isClient) {                                                                                // 36\n  Template.body.helpers({ // publishes an array of messages, displayed in forward chronological order\n    recentMessages: function () {                                                                     // 38\n      function recentMessages() {                                                                     // 38\n        return Messages.find({}, { sort: { createdAt: 1 } });                                         // 39\n      }                                                                                               //\n                                                                                                      //\n      return recentMessages;                                                                          //\n    }()                                                                                               //\n  });                                                                                                 //\n                                                                                                      //\n  Template.body.events({ // event handler                                                             // 43\n    \"submit .new-message\": function () {                                                              // 44\n      function submitNewMessage(event) {                                                              // 44\n        var text = event.target.text.value;                                                           // 45\n                                                                                                      //\n        Meteor.call('sendMessage', text);                                                             // 47\n                                                                                                      //\n        event.target.text.value = \"\";                                                                 // 49\n        return false;                                                                                 // 50\n      }                                                                                               //\n                                                                                                      //\n      return submitNewMessage;                                                                        //\n    }()                                                                                               //\n  }); // replicates to multiple clients at the same time, clients connected to the server; when we save to the db, it reactively changes our interface, and then when the data gets up to the db, it will push down any changes to any connected clients\n                                                                                                      //\n  Accounts.ui.config({                                                                                // 36\n    passwordSignupFields: \"USERNAME_ONLY\"                                                             // 55\n  });                                                                                                 //\n}                                                                                                     //\n                                                                                                      //\n// code taken from \"An Introduction to Meteor\" video:                                                 //\n// https://www.youtube.com/watch?v=dOCMpoeuwTI                                                        //\n                                                                                                      //\n// import { Template } from 'meteor/templating';                                                      //\n// import { ReactiveVar } from 'meteor/reactive-var';                                                 //\n                                                                                                      //\n// import './main.html';                                                                              //\n                                                                                                      //\n// Template.hello.onCreated(function helloOnCreated() {                                               //\n//   // counter starts at 0                                                                           //\n//   this.counter = new ReactiveVar(0);                                                               //\n// });                                                                                                //\n                                                                                                      //\n// Template.hello.helpers({                                                                           //\n//   counter() {                                                                                      //\n//     return Template.instance().counter.get();                                                      //\n//   },                                                                                               //\n// });                                                                                                //\n                                                                                                      //\n// Template.hello.events({                                                                            //\n//   'click button'(event, instance) {                                                                //\n//     // increment the counter when button is clicked                                                //\n//     instance.counter.set(instance.counter.get() + 1);                                              //\n//   },                                                                                               //\n// });                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\"extensions\":[\".js\",\".json\",\".html\",\".css\"]});\nrequire(\"./client/template.main.js\");\nrequire(\"./client/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/client/template.main.js","/client/main.js"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2G;;;;;;;;;;;AC9BA,WAAW,IAAI,MAAM,UAAN,CAAiB,MAArB,CAAX;;;AAGA,IAAI,OAAO,QAAP,EAAiB;;;AAGnB,SAAO,OAAP,CAAe,UAAf,EAA2B,YAAW;AACpC,WAAO,SAAS,IAAT,CAAc,EAAd,EAAkB,EAAC,MAAM,EAAC,WAAW,CAAC,CAAD,EAAlB,EAAuB,OAAO,CAAP,EAA1C,CAAP;;AADoC,GAAX,CAA3B,CAHmB;CAArB;;AAUE,IAAI,OAAO,QAAP,EAAiB;;;AAGnB,SAAO,SAAP,CAAiB,UAAjB,EAHmB;CAArB;;;AAOA,OAAO,OAAP,CAAe;AACb;AAAa,yBAAU,OAAV,EAAmB;AAC9B,UAAG,CAAE,OAAO,MAAP,EAAF,EAAmB;AACpB,cAAM,IAAI,OAAO,KAAP,CAAa,gBAAjB,CAAN,CADoB;OAAtB;;;AAD8B,cAM5B,CAAS,MAAT,CAAgB;AACd,cAAM,OAAN;AACA,mBAAW,IAAI,IAAJ,EAAX;AACA,kBAAU,OAAO,IAAP,GAAc,QAAd;AAHI,OAAhB,EAN4B;KAAnB;;;KAAb;CADF;;AAeA,IAAI,OAAO,QAAP,EAAiB;AACnB,WAAS,IAAT,CAAc,OAAd,CAAsB;AACpB;AAAgB,gCAAY;AAC1B,eAAO,SAAS,IAAT,CAAc,EAAd,EAAkB,EAAC,MAAM,EAAC,WAAW,CAAX,EAAP,EAAnB,CAAP,CAD0B;OAAZ;;;OAAhB;GADF,EADmB;;AAOrB,WAAS,IAAT,CAAc,MAAd,CAAqB;AACnB;AAAuB,gCAAU,KAAV,EAAiB;AACtC,YAAI,OAAO,MAAM,MAAN,CAAa,IAAb,CAAkB,KAAlB,CAD2B;;AAGtC,eAAO,IAAP,CAAY,aAAZ,EAA2B,IAA3B,EAHsC;;AAKtC,cAAM,MAAN,CAAa,IAAb,CAAkB,KAAlB,GAA0B,EAA1B,CALsC;AAMtC,eAAO,KAAP,CANsC;OAAjB;;;OAAvB;GADF;;AAPqB,UAkBrB,CAAS,EAAT,CAAY,MAAZ,CAAmB;AACjB,0BAAsB,eAAtB;GADF,EAlBqB;CAArB","file":"/app.js","sourcesContent":["\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"container\"\n  }, \"\\n  \", HTML.HEADER(\"\\n  \", HTML.Raw(\"<h1>Basic Chat Application</h1>\"), \"\\n  \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n  \", HTML.Raw(\"<!-- template loginButtons -->\"), \"\\n  \"), \"\\n\\n  \", HTML.UL(\"\\n  \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"recentMessages\"));\n  }, function() {\n    return [ \"\\n  \", HTML.Comment(\" handle bar syntax \"), \"\\n  \", HTML.LI(\"\\n  \", HTML.DIV({\n      \"class\": \"username\"\n    }, Blaze.View(\"lookup:username\", function() {\n      return Spacebars.mustache(view.lookup(\"username\"));\n    })), \"\\n  \", HTML.DIV({\n      \"class\": \"message\"\n    }, Blaze.View(\"lookup:message\", function() {\n      return Spacebars.mustache(view.lookup(\"message\"));\n    })), \"\\n  \"), \"\\n  \" ];\n  }), \"\\n  \"), \"\\n  \", HTML.FOOTER(\"\\n  \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));\n  }, function() {\n    return [ \"\\n  \", HTML.Comment(\" helper from accounts package; hides form if user is not logged in \"), \"\\n\\n  \", HTML.FORM({\n      \"class\": \"new message\"\n    }, \"\\n  \", HTML.INPUT({\n      type: \"text\",\n      name: \"text\",\n      placeholder: \"Add a message\"\n    }), \"\\n  \"), \"\\n\\n  \" ];\n  }), \"\\n  \"), \"\\n\\n  \");\n}));\nMeteor.startup(Template.body.renderToDocument);\n","Messages = new Mongo.Collection(\"msgs\");\n// This code runs on both client (mini Mongo, Meteor's client-side cache; mini Mongo will keep a subset of the data that's on the server) and server (Production Mongo db database)\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // \"Meteor.publish\" gets data from the server to the client\n  Meteor.publish(\"messages\", function() {\n    return Messages.find({}, {sort: {createdAt: -1}, limit: 5});\n    // 5 most recent messages to be sent to client\n  });\n  }\n\n\n  if (Meteor.isClient) {\n    // This code only runs on the client\n    // Subscribe to Meteor.publish (publication) to recieve messages; similar to a REST end point\n    Meteor.subscribe(\"messages\");\n  }\n\n// This code sends data (messages) from the client to the server\n  Meteor.methods({\n    sendMessage: function (message) {\n      if(! Meteor.userId()) {\n        throw new Meteor.Error(\"not-authorized\");\n        } // user authentication\n        //prevents users from sending messages when not logged in\n\n        Messages.insert({\n          text: message,\n          createdAt: new Date(),\n          username: Meteor.user().username // user authentication\n        });\n      }\n  });\n\n  if (Meteor.isClient) {\n    Template.body.helpers({ // publishes an array of messages, displayed in forward chronological order\n      recentMessages: function () {\n        return Messages.find({}, {sort: {createdAt: 1}});\n      }\n    });\n\n  Template.body.events({ // event handler\n    \"submit .new-message\": function (event) {\n      var text = event.target.text.value;\n\n      Meteor.call('sendMessage', text);\n\n      event.target.text.value = \"\";\n      return false;\n    }\n  }); // replicates to multiple clients at the same time, clients connected to the server; when we save to the db, it reactively changes our interface, and then when the data gets up to the db, it will push down any changes to any connected clients\n\n  Accounts.ui.config({\n    passwordSignupFields: \"USERNAME_ONLY\"\n  });\n\n}\n\n\n// code taken from \"An Introduction to Meteor\" video:\n// https://www.youtube.com/watch?v=dOCMpoeuwTI\n\n\n\n\n// import { Template } from 'meteor/templating';\n// import { ReactiveVar } from 'meteor/reactive-var';\n\n// import './main.html';\n\n// Template.hello.onCreated(function helloOnCreated() {\n//   // counter starts at 0\n//   this.counter = new ReactiveVar(0);\n// });\n\n// Template.hello.helpers({\n//   counter() {\n//     return Template.instance().counter.get();\n//   },\n// });\n\n// Template.hello.events({\n//   'click button'(event, instance) {\n//     // increment the counter when button is clicked\n//     instance.counter.set(instance.counter.get() + 1);\n//   },\n// });\n"]}}]